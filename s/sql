=====================================================================================================
Create table employee( employee_id number(3), first_name varchar2(10),
	last_name varchar2(10), mgr number(4),
	hire_date date, 	job_id varchar2(10),
	salary number(10),	commision number(8), deptno number(2));
  From another table along with data
	SQL> create table copyOfEmp as select * from employee;
  From another table without data
	SQL> Create table copyOfEmp2 as select * from employee where 1=2;
=====================================================================================================
Add coloumn:	
	SQL> alter table employee add address varchar2(20);
Changing data types and column size
	SQL> alter table employee modify address varchar2 (10);
Rename:			SQL> Rename employee to emp;
Rename a column:	SQL> alter table employee rename column mgr to manager;
Drop a field:		SQL> alter table employee drop column address;
Drop Table:		SQL> Drop Table Student_table;
Truncate:		SQL> truncate table employee;
=====================================================================================================
Insert
	SQL> insert into department values(10,'accounts','chennai');
	SQL> insert into department (deptno,dname)values(20,'finance');
	SQL> insert into employee values(&empid,'&fn','&ln',&mgr,'&hdate','&job',&sal,
	&comm,&dept);
  NULL values
	SQL> insert into department values( '101','',chennai);
  From another table
	SQL> insert into copyofemp2 (select * from employee where employee_id > 100);
=====================================================================================================
  Delete rows: 	SQL> delete from department where loc='chennai';
  Update:	SQL> update department set loc='Hyderabad', dname= 'cse' where deptno=20;
  Select:	SQL> select * from department;
		SQL> select dname, loc from department;
  
  Alias:	SQL> select dname, loc as location from department;
  Distinct:	SQL> select distinct loc from department;
  Between:	SQL> select first_name, deptno from employee where salary between 20000 and 35000;
  IN:		SQL> select first_name, deptno from employee where job_id in ('J1','J2');
  NOT:		SQL> select dname,loc from department where loc not in ('chennai','Bangalore');
  Like: 	% = zero or many | _ = one 
		SQL> select dname,loc from department where loc like 'c%';
		SQL> select dname,loc from department where loc like 'chen_ _ _';
		SQL> select * from emp where ename like ‘%\%%’ escape ‘\’; //Names containing %
  
  NULL: 	SQL> select * from department where loc is null;
  >/<:		SQL> select first_name, deptno, salary from employee where salary > 20000 and salary < 35000;
  OR:		SQL> select * from department where loc = 'chennai' or dname='IT';	
=====================================================================================================
Constraints
  Without name
	CREATE TABLE emp_demo2
	(employee_id 	        NUMBER(6)    PRIMARY KEY,
	first_name 		VARCHAR2(20) NOT NULL,
	last_name 		VARCHAR2(25) NOT NULL,
	email 			VARCHAR2(25) UNIQUE,
	phone_number     	VARCHAR2(20) UNIQUE,
	job_id 			VARCHAR2(10),
	salary 			NUMBER(8,2)  CHECK(SALARY>0),
	deptid 			NUMBER(4)	);
  With name
	CREATE TABLE emp_demo3
	(employee_id 	        NUMBER(6) 	CONSTRAINT name1 PRIMARY KEY,
	first_name 		VARCHAR2(20),
	last_name 		VARCHAR2(25) 	CONSTRAINT name2 NOT NULL,
	email 			VARCHAR2(25) 	CONSTRAINT name3 NOT NULL,
	phone_number 	        VARCHAR2(20),
	job_id 			VARCHAR2(10) 	CONSTRAINT name4 NOT NULL,
	salary 			NUMBER(8,2) 	CONSTRAINT name5 NOT NULL,
	deptid 			NUMBER(4), 				
	CONSTRAINT 		emp_dept 	FOREIGN KEY(deptid)  REFERENCES department(deptid) ,
	CONSTRAINT 		emp_salary_min 	CHECK 	(salary > 0) ,
	CONSTRAINT 		emp_email_uk 	UNIQUE 	(email)	);
  Check constraint
	CREATE TABLE emp_demo4
	(emp_id 	NUMBER(6),
	emp_name 	VARCHAR2(15),
	salary 		NUMBER(10) 		CHECK (salary between 1000 and 10000)	);
=====================================================================================================
  Adding Constriants	
	ALTER TABLE emp_demo4 ADD CONSTRAINT name1 PRIMARY KEY	(emp_id);
	ALTER TABLE emp_demo4 ADD CONSTRAINT name2 UNIQUE	(phoneno);
	ALTER TABLE emp_demo4 ADD CONSTRAINT name3 FOREIGN KEY	(DNO) REFERENCES department(dno);
	ALTER TABLE emp_demo4 ADD CONSTRAINT con_emp_ck CHECK (salary >0);
  
  Modify:	ALTER TABLE emp_demo4 MODIFY (<Column name> <datatype> CONSTRAINT name NOT NULL);
  Drop:		ALTER TABLE <tablename> DROP CONSTRAINT < constraint name >;
  Drop the unique key: ALTER TABLE employees DROP UNIQUE (email);
  CASCADE Constraints
	SQL> 
	   EX:  CREATE TABLE supplier
		(supplier_id number(10)not null,
		supplier_namevarchar2(50)not null,
		contact_namevarchar2(50),
		CONSTRAINT supplier_pk PRIMARY KEY (supplier_id));		

		CREATE TABLE products
		(product_id number(10) not null,
		suppl_id number(10) not null,
		CONSTRAINT fk_supplier FOREIGN KEY (suppl_id) REFERENCES supplier(supplier_id) 
		ON DELETE CASCADE);
=====================================================================================================
OPERATORS
	SELECT: SQL> select first_name, deptno, salary+100 from employee where salary > 35000;
	UPDATE: SQL> update employee set salary = salary+salary*0.1 where employee_id = 111;

Aggregate/Group Functions	
	count (*),	   Count returns the number of rows	SQL>Select count(sal) from emp;
	count (column name),
	count (distinct column name)
	min (column name)  Min value in the column
	max (column name)  Max value in the column
	avg (column name)  Avg value in the column
	sum (column name)  Sum of column values

 Ex:	Q.Display the average,highest, lowest and sum of salaries for all the sales representatives.
	A. Select avg(salary), max(salary), min(salary), sum(salary) From employees where job_id like
	‘%rep%’;

SET OPERATORS: 	UNION,UNION ALL,DIFFERENCE,MINUS
	sql> select first_name from employees union select name from sample ;
	sql> select first_name from employees intersect select name from sample ;

=====================================================================================================
Character Function
	initcap(char)  				Changes first letter to capital
	lower (char)  				Changes to lower case
	upper (char)  				Changes to upper case
	ltrim (char, set)  			Removes the set from left of char
	rtrim (char, set)  			Removes the set from right of char
	translate(char, from, to)  		Translate 'from' anywhere in char to 'to'
	substr(char, m , n)  			Returns chars starting at m and of n length
	chr(number)  				Returns char equivalent
	length(char)  				Length of string
	replace(char, search string, replace string)Replaces the search string to new
	lpad(char, length, special char)  	Pads special char to left of char to Max of length
	rpad(char, length, special char)  	Pads special char to right of char to Max oflength
  

	Examples:
	QUERY 						OUTPUT
	Initcap(char)
	SQL>select initcap(‘hello’) from dual;		Hello
	Lower(char)
	SQL>select lower(‘FUN’) from dual;      	fun
	Upper(char)
	SQL>select upper(‘sun’) from dual;		SUN
	Ltrim(char, set)
	SQL>select ltrim(‘xyzhello’,’xyz’) from dual;	hello
	Rtrim(char, set)
	SQL>select rtrim(‘xyzhello’,’llo’) from dual;	xyzhe
	translate(char,from,to)
	SQL>select translate(‘jack’,’j’,’b’) from dual;	back
	Replace(char,from,to)
	SQL>select replace(‘jack and jue’,’ j’, ’bl’) //REPLACE J WITH BL
	from dual;					black and blue

Concatenation operator ||: is used to merge two or more strings.
	SQL> select dname || ' is located in ' || loc from department;
	Output: finance is located in Hyderabad

=====================================================================================================
NUMERIC FUNCTIONS:
	ceil ( )  					Rounds the argument
	Ceil(n)  					SQL>select ceil(48.778) from dual;  49
	abs ( )  					Returns the absolute value
	cos ( )  					Cosine value of argument
	exp ( )  					Exponent value
	floor( )  					Truncated value
	power (m,n)  					N raised to m
	mod (m,n)  					Remainder of m / n
	round (m,n)  					Rounds m's decimal places to n
	trunc (m,n)  					Truncats m's decimal places to n
	sqrt (m)  					Square root value


     Ex:Abs( n) SQL>select abs(-15) from dual 15	29
	Ceil(n) SQL>select ceil(48.778) from dual; 	49
	Cos(n) SQL>select cos(180) from dual; 		-0.59884601
	Cosh(n): SQL>select cosh(0) from dual;		1
	Exp(n) SQL>select exp(4) from dual; 		54.59815
	Floor(n)SQL>select floor(4.678) from dual;	4
	Power(m ,n) SQL>select power(5,2) from dual; 	25
	Mod(m ,n) SQL>select mod(11,2) from dual; 	1
	Round(m ,n) SQL>select round(112.257,2) from dual; 112.26

=====================================================================================================
DATE FORMATTING/CONVERSION FUNCTIONS: 

   Convert data type
	
	SQL> select to_char (hire_date, 'ddth "of" fmmonth yyyy') from employee;
	Output: 21st of july 2010
   Date
	SQL>select to_date ('December 18 2007','month-dd-yyyy') from dual;
		Output: 18-DEC-07 

	SQL>select to_char(to_date(’15-aug-1947’,’dd-mon-yyyy’),’Day’) from dual; //Find the Day on Date
		Output: Friday
	
	SQL> select round(hire_date,'year') from employee;
		Output:	01-JAN-11
   Number( )
	SQL> select to_number ('100') from dual;

DATE FUNCTIONS
   
    	ADD_MONTHS (date, n)  		Returns a date value after adding 'n'months to the date 'x'.
					SQL> select add_months(hire_date,3) from employee;
	
	MONTHS_BETWEEN (x1, x2)  	Returns the number of months between dates x1 and x2.
					SQL> select months_between(sysdate,hire_date) from employee;
	
	ROUND (x, date_format)		Returns the date 'x'rounded off to the nearest century, year,month, date, hour, minute, or second as specified by the 'date_format'.
					SQL> select round(hire_date,'year') from employee;
	
	TRUNC (x, date_format)		Returns the date 'x' lesser than or equal to the nearest century, year, month, date, hour, minute, or second as specified by the 'date_format'.
	
	NEXT_DAY (x, week_day)    	Returns the next date of the 'week_day'on or after the date 'x' occurs.
					SQL> select next_day(hire_date,'wednesday') from employee;

	LAST_DAY (x)			It is used to determine the number of days remaining in a month from the date 'x'specified.
					SQL> select last_day(hire_date) from employee;

	SYSDATE  			Returns the systems current date and time.
					SQL> select sysdate from dual


For example you want to see hire dates of all employee in the following format:Friday, 8th August, 2003 
SQL> select to_char(hire_date,’Day, ddth Month, yyyy’) from emp;
SQL> select to_char(sysdate,’Day, ddth Month, yyyy’)”Today” from dual;
=====================================================================================================
JOINS :
   EQUI JOIN OR INNER JOIN : A column (or multiple columns) in two or more tables match.
	SQL> SELECT employee.first_name, department.dname
	FROM employee INNER JOIN department
	ON employee.deptno = department.deptno;
   OUTER JOIN
	SELECT department.dname, employee.first_name
	FROM department LEFT OUTER JOIN employee
	ON department.deptno = employee.deptno
	WHERE department.dname = 'marketing';
   RIGHT OUTER 
	SELECT employee.first_name, department.dname
	FROM employee RIGHT OUTER JOIN department
	ON employee.deptno = department.deptno
	WHERE department.dname = 'marketing';
   FULL OUTER JOIN
	SELECT employee.first_name, department.dname
	FROM employee FULL OUTER JOIN department
	ON employee.deptno = department.deptno;
   Cross Join
	select employee.deptno from employee cross join department;
   Natural Join
	select deptno,first_name from employee natural join department;
=====================================================================================================
SUBQUERY
	SELECT <column_name(s)> FROM <table_name> WHERE < column name >
	< relational op.> < sub query>;
  Example:
	SELECT employee_id ,first_name FROM employee WHERE deptno =
	(SELECT deptno FROM department	WHERE dname = 'IT')
  ANY:
	SELECT employee_id ,first_name FROM employee	WHERE salary>= ANY
	(SELECT salary FROM employee 	WHERE deptno = 30) AND deptno = 10;
  ALL
	SELECT employee_id ,first_name FROM employee	WHERE salary > ALL(
	SELECT salary FROM employee WHERE deptno = 30);
  IN 
	SELECT employee_id ,first_name FROM employee 	WHERE deptno IN
	(SELECT deptno FROM department WHERE loc = 'Bangalore');
  NOT IN
	SELECT employee_id ,first_name FROM employee WHERE deptno NOT IN
	(SELECT deptno FROM department	WHERE loc = 'Bangalore');
  EXISTS
	SELECT * FROM department	WHERE EXISTS
	(SELECT * FROM employee 	WHERE deptno = department.deptno);
  NOT EXISTS
	SELECT * FROM department    WHERE NOT EXISTS
	(SELECT * FROM employee  	WHERE deptno = department.deptno);
=====================================================================================================
GROUP BY CLAUSE 
	SELECT <column_name(s)>
	FROM <table_name>
	Where <conditions>
	GROUP BY <column2>, <column1>;
	SQL> Select avg(salary), max(salary), min(salary), sum(salary) From employees where job_id like '%rep%';
HAVING CLAUSE
	SELECT deptno, min(salary), max(salary)
	FROM employee
	WHERE job_id = 'J2'
	GROUP BY deptno
	HAVING count(*) > 1;
ORDER BY
	SELECT first_name, deptno, hire_date	FROM employee
	ORDER BY deptno ASC, hire_date desc;
=====================================================================================================
VIEWS
	create  [or  replace][[no][force]]view  <view_name>  [column  alias  name…]as
	<query>[with[check option]read only][constraint]];
	SQL>create or replace view EMP_VIEW as select * from EMP;
COLUMN SUBSET VIEW:
	SQL>create or replace view CSV as select empno, ename, sal from EMP;
ROW SUBSET VIEW:
	SQL> create or replace view RSV as select * from EMP where deptno=10;
GROUPED VIEW:
	SQL>create or replace view GV (dno, avgsal) as select deptno, AVG (SAL) from emp group by deptno;
JOINED VIEWS:
	SQL>create  or  replace  view  JV(empno,ename,sal,dname,loc)  as  select
	empno,ename,sal,dname,loc from EMP,DEPT where EMP.deptno=DEPT.deptno;
CREATING A READ ONLY VIEW:
	SQL>create or replace view WRO as select * from EMP with read only;
	SQL>create or replace force view FVIEW as select * from MYDEPT;
VIEW WITH CHECK OPTION(INSERT/UPDATE):
	SQL>create view DEPTNO10_VIEW as select * from EMP where deptno=10 WITH CHECK
    OPTION CONSTRAINT CHK_DNO10;
DROPPING A VIEW:
	SQL>drop view DEPTNO10;
=====================================================================================================
